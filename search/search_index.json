{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 SeaTable scirpts are written in Javascript language. They are designed for you to manipulate data in a base easily. A script can be run in users' browser or in background inside a Docker container. (Currently running in browser is supported yet) There are some pre-defined objects: base, you can use base object to manipulate data in a base. output, you can use output object to output some feedbacks. You can find some easy to understand examples here: https://github.com/seatable/seatable-scripts/tree/master/examples Understanding the data structure of base object will help to manipulate base: Data structure Programming reference: base output utilities","title":"Home"},{"location":"#introduction","text":"SeaTable scirpts are written in Javascript language. They are designed for you to manipulate data in a base easily. A script can be run in users' browser or in background inside a Docker container. (Currently running in browser is supported yet) There are some pre-defined objects: base, you can use base object to manipulate data in a base. output, you can use output object to output some feedbacks. You can find some easy to understand examples here: https://github.com/seatable/seatable-scripts/tree/master/examples Understanding the data structure of base object will help to manipulate base: Data structure Programming reference: base output utilities","title":"Introduction"},{"location":"base/","text":"Base object \u00b6 Base object provide a way to manipulate data in a base. Table \u00b6 getActiveTable \u00b6 Get the currently selected table. Example const table = base . getActiveTable (); output . markdown ( `#### ${ table . name } ` ); getTables \u00b6 Get all tables. Example const tables = base . getTables (); output . text ( tables . length ); getTableByName \u00b6 Get a table via its name. Example const table = base . getTableByName ( 'A test table' ); output . text ( table . _id ); addTable \u00b6 Add a table. Example base . addTable ( 'New table' ); renameTable \u00b6 Rename a table. Example base . renameTable ( 'Old name' , 'New name' ); deleteTable \u00b6 Delete a table. Example base . deleteTable ( 'Old table' ); View \u00b6 getActiveView \u00b6 Get the current selected view. Example const view = base . getActiveView (); output . text ( view . name ); getViews \u00b6 Get all views of a table. Example const views = base . getViewsByName ( 'Table name' ); output . text ( views . length ); getViewByName \u00b6 Get a view by table object and view name. Example const view = base . getViewByName ( table , 'View Name' ); output . text ( view . name ); addView \u00b6 Add a view to a table base . addView ( tableName : String , viewName : String ); Example base . addView ( 'table' , 'view1' ); renameView \u00b6 Rename a view base . renameView ( tableName : String , currentViewName : String , nextViewName : String ); Example base . renameView ( 'table' , 'view1' , 'view2' ); deleteView \u00b6 Delete a view base . deleteView ( tableName : String , viewName : String ); Example base . deleteView ( 'table' , 'view2' ); Column \u00b6 getColumns \u00b6 Get columns of a table. base . getColumns ( table : Object ); Example const columns = base . getColumns ( table ); column . forEach (( column ) => { output . text ( column . name ); }) #### getShownColumns Get all visible columns in a view ```javascript const columns = base.getShownColumns(table: Object, view: Object); Example const columns = base . getShownColumns ( table , view ); column . forEach (( column ) => { output . text ( column . name ); }); getColumnByName \u00b6 Get column object by name. const column = base . getColumnByName ( table : Object , name : String ); Example const column = base . getColumnByName ( table , \"A test column\" ); output . text ( column . name ); getColumnsByType \u00b6 Get columns of a specific type. const columns = base . getColumnsByType ( table : Object , type : String ); Example const columns = base . getColumnsByType ( table , \"text\" ); output . text ( column . length ); Row \u00b6 getRows \u00b6 Get rows of a specific view. const rows = base . getRows ( table : Object , view : Object ); getGroupedRows \u00b6 Get grouped rows of a specific view. The view should be a view containing group of rows. base . getGroupedRows ( table : Object , view : Object ); Example const table = base . getTableByName ( 'table' ); const view = base . getViewByName ( table , 'grouped view' ); const groupViewRows = base . getGroupedRows ( table , view ); getRowById Get a row by its ID. const row = base . getRowById ( table : Object , rowId : String ); Example const row = base . getRowById ( table , \"M_lSEOYYTeuKTaHCEOL7nw\" ); deleteRowById \u00b6 Delete a row in a table by its ID. base . deleteRowById ( table : Object , rowId : String ); Example base . deleteRowById ( table , \"M_lSEOYYTeuKTaHCEOL7nw\" ); addRow \u00b6 Add a row to a table. The new row will append at the end of the table. If view is given, append the row at the end of that view. base . addRow ( tableName : String , rowData : Object , viewName ?: String ) Example // use case base . addRow ( 'Table1' , { 'Name' : 'Joe Key' , 'Age' : '18' }); // use case base . addRow ( 'Table1' , { 'Name' : 'Joe Key' , 'Age' : '18' }, 'Default View' ); modifyRow \u00b6 Modify a row in a table. base . modifyRow ( table : Object , row : Object , updateRowData : Object ); Example const table = base . getTableByName ( 'table' ); const row = base . getRowById ( table , \"M_lSEOYYTeuKTaHCEOL7nw\" ); base . modifyRow ( table , row , { 'Name' : 'new name' , 'number' : 100 });","title":"Base"},{"location":"base/#base-object","text":"Base object provide a way to manipulate data in a base.","title":"Base object"},{"location":"base/#table","text":"","title":"Table"},{"location":"base/#getactivetable","text":"Get the currently selected table.","title":"getActiveTable"},{"location":"base/#gettables","text":"Get all tables.","title":"getTables"},{"location":"base/#gettablebyname","text":"Get a table via its name.","title":"getTableByName"},{"location":"base/#addtable","text":"Add a table.","title":"addTable"},{"location":"base/#renametable","text":"Rename a table.","title":"renameTable"},{"location":"base/#deletetable","text":"Delete a table.","title":"deleteTable"},{"location":"base/#view","text":"","title":"View"},{"location":"base/#getactiveview","text":"Get the current selected view.","title":"getActiveView"},{"location":"base/#getviews","text":"Get all views of a table.","title":"getViews"},{"location":"base/#getviewbyname","text":"Get a view by table object and view name.","title":"getViewByName"},{"location":"base/#addview","text":"Add a view to a table base . addView ( tableName : String , viewName : String );","title":"addView"},{"location":"base/#renameview","text":"Rename a view base . renameView ( tableName : String , currentViewName : String , nextViewName : String );","title":"renameView"},{"location":"base/#deleteview","text":"Delete a view base . deleteView ( tableName : String , viewName : String );","title":"deleteView"},{"location":"base/#column","text":"","title":"Column"},{"location":"base/#getcolumns","text":"Get columns of a table. base . getColumns ( table : Object );","title":"getColumns"},{"location":"base/#getcolumnbyname","text":"Get column object by name. const column = base . getColumnByName ( table : Object , name : String );","title":"getColumnByName"},{"location":"base/#getcolumnsbytype","text":"Get columns of a specific type. const columns = base . getColumnsByType ( table : Object , type : String );","title":"getColumnsByType"},{"location":"base/#row","text":"","title":"Row"},{"location":"base/#getrows","text":"Get rows of a specific view. const rows = base . getRows ( table : Object , view : Object );","title":"getRows"},{"location":"base/#getgroupedrows","text":"Get grouped rows of a specific view. The view should be a view containing group of rows. base . getGroupedRows ( table : Object , view : Object );","title":"getGroupedRows"},{"location":"base/#deleterowbyid","text":"Delete a row in a table by its ID. base . deleteRowById ( table : Object , rowId : String );","title":"deleteRowById"},{"location":"base/#addrow","text":"Add a row to a table. The new row will append at the end of the table. If view is given, append the row at the end of that view. base . addRow ( tableName : String , rowData : Object , viewName ?: String )","title":"addRow"},{"location":"base/#modifyrow","text":"Modify a row in a table. base . modifyRow ( table : Object , row : Object , updateRowData : Object );","title":"modifyRow"},{"location":"data-structure/","text":"Data structure of objects in SeaTable \u00b6 Row \u00b6 Row is an javascript object, use row['colum_name'] to get the value of a specific cell. There are a few special columns: _id : The id of the row _creator : The creator for this row _ctime : The create time for this row _last_modifier : The last modifier for this row _mtime : The last modified time for this row Different column types have different type of values: simple-text : string number : number single-select : option name, string date : string, in format 2020-01-01 or 2020-01-01 10:00 check : boolean long-text : Markdown string image : array, each element of the array is the URL of image multi-select : array, each element of the array is an option name collaborator : array, each element of the array is a collaborator's ID link : array, each element of the array is a link name file : array, each element of the array is a file object [{name: string, url: string, size: number, type: 'file'}] Column \u00b6 A column object has following fields: key : The key of the column, string type : The type of the column(long-text, single-select, number, file and so on), string name : The name of the table, string Table \u00b6 A table object has following fields: _id : The id of the table name : The name of the table, string View \u00b6 A view object has following fields: name : The name of the view, string","title":"Data structure"},{"location":"data-structure/#data-structure-of-objects-in-seatable","text":"","title":"Data structure of objects in SeaTable"},{"location":"data-structure/#row","text":"Row is an javascript object, use row['colum_name'] to get the value of a specific cell. There are a few special columns: _id : The id of the row _creator : The creator for this row _ctime : The create time for this row _last_modifier : The last modifier for this row _mtime : The last modified time for this row Different column types have different type of values: simple-text : string number : number single-select : option name, string date : string, in format 2020-01-01 or 2020-01-01 10:00 check : boolean long-text : Markdown string image : array, each element of the array is the URL of image multi-select : array, each element of the array is an option name collaborator : array, each element of the array is a collaborator's ID link : array, each element of the array is a link name file : array, each element of the array is a file object [{name: string, url: string, size: number, type: 'file'}]","title":"Row"},{"location":"data-structure/#column","text":"A column object has following fields: key : The key of the column, string type : The type of the column(long-text, single-select, number, file and so on), string name : The name of the table, string","title":"Column"},{"location":"data-structure/#table","text":"A table object has following fields: _id : The id of the table name : The name of the table, string","title":"Table"},{"location":"data-structure/#view","text":"A view object has following fields: name : The name of the view, string","title":"View"},{"location":"output/","text":"Output object \u00b6 Output object supports output strings in text or Markdown format. Text const table = base . getActiveTable (); output . text ( table . name ); Markdown const table = base . getActiveTable () \uff1b output . markdown ( `##### ${ table . name } ` );","title":"Output"},{"location":"output/#output-object","text":"Output object supports output strings in text or Markdown format.","title":"Output object"},{"location":"utils/","text":"Utility functions \u00b6 Utility functions help you to work with data in SeaTable. formatDate \u00b6 Format date to 'YYYY-MM-DD' to be used in a date column. Example let date = new Date (); let formatDate = base . utils . formatDate ( date ); output . text ( formatDate ); // 2020-08-20 formatDateWithMinutes \u00b6 Format date to 'YYYY-MM-DD HH:mm' to be used in a date column. Example let date = new Date (); let formatDate = base . utils . formatDateWithMinutes ( date ); output . text ( formatDate ); // 2020-08-20 14:00","title":"Utils"},{"location":"utils/#utility-functions","text":"Utility functions help you to work with data in SeaTable.","title":"Utility functions"},{"location":"utils/#formatdate","text":"Format date to 'YYYY-MM-DD' to be used in a date column.","title":"formatDate"},{"location":"utils/#formatdatewithminutes","text":"Format date to 'YYYY-MM-DD HH:mm' to be used in a date column.","title":"formatDateWithMinutes"}]}